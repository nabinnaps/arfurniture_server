// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  cart   Cart[]
}

model Otp {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  otp        String
  created_at DateTime @default(now())
}

model Product {
  id                Int      @id @default(autoincrement())
  productName       String
  description       String
  price             String
  size              String
  categoryId        Int
  quantityAvailable Int
  image             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  reviews   Review[]
  productCategory    ProductCategory  @relation(fields: [categoryId], references: [id])
  cartItems CartItem[]

}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

}

model ProductCategory {
  id       Int      @id @default(autoincrement())
  category String   @unique

  product Product[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}