// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  cart   Cart[]
  wishlist Wishlist[]
  payment Payment[]
  orders Orders[]
  transaction Transaction[]
}

model Otp {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  otp        String
  created_at DateTime @default(now())
}

model Product {
  id                Int      @id @default(autoincrement())
  productName       String
  description       String
  price             String
  size              String
  categoryId        Int
  quantityAvailable Int
  image             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  reviews   Review[]
  productCategory    ProductCategory  @relation(fields: [categoryId], references: [id])
  cartItems CartItem[]
  wishlistItems WishlistItem[]
  OrderDetails   OrderDetails[]


}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  
}



model ProductCategory {
  id       Int      @id @default(autoincrement())
  category String   @unique

  product Product[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}


model Wishlist {
  wishlistId Int      @id @default(autoincrement())
  UserID     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User     @relation(fields: [UserID], references: [id])
  wishlistItems WishlistItem[]
}

model WishlistItem {
  WishlistItemID Int      @id @default(autoincrement())
  WishlistID     Int
  ProductID      Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  wishlist Wishlist @relation(fields: [WishlistID], references: [wishlistId])
  product  Product  @relation(fields: [ProductID], references: [id])
}

// ordersModel.js


model Payment {
  PaymentID    Int      @id @default(autoincrement())
  userId       Int
  Amount       String
  PaymentDate  DateTime
  Status       String

  user        User      @relation(fields: [userId], references: [id])
  Orders      Orders[]  // Assuming one payment can be associated with multiple orders
  Transactions Transaction[]
}

model Orders {
  OrderID        Int        @id @default(autoincrement())
  UserID         Int
  OrderDate      DateTime
  TotalAmount    String
  PaymentID      Int
  DeliveryStatus String

  OrderDetails   OrderDetails[]
  Payment        Payment @relation(fields: [PaymentID], references: [PaymentID])
  user        User      @relation(fields: [UserID], references: [id])
  transaction Transaction[]

}

model OrderDetails {
  OrderDetailID Int      @id @default(autoincrement())
  OrderID       Int
  ProductID     Int
  Quantity      Int
  Price         String

  Order   Orders @relation(fields: [OrderID], references: [OrderID])
  Product Product @relation(fields: [ProductID], references: [id])
}

model Transaction {
  TransactionID   Int      @id @default(autoincrement())
  UserID          Int
  PaymentID       Int
  OrderID         Int
  TransactionDate DateTime
  Amount          String
  Status          String

  user        User      @relation(fields: [UserID], references: [id])
  Payment     Payment   @relation(fields: [PaymentID], references: [PaymentID])
  Order       Orders    @relation(fields: [OrderID], references: [OrderID])
}
